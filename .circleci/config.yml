version: 2.1

# Common executor configuration
executors:
  clojure:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1
    working_directory: ~/repo
  clojure-java-11:
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.9.1
    working_directory: ~/repo



# Job definitions
jobs:
  style:
    executor: clojure
    steps:
      - checkout
      - run:
          name: Install cljstyle
          environment:
            CLJSTYLE_VERSION: 0.14.0
          command: |
            wget https://github.com/greglook/cljstyle/releases/download/${CLJSTYLE_VERSION}/cljstyle_${CLJSTYLE_VERSION}_linux.tar.gz
            tar -xzf cljstyle_${CLJSTYLE_VERSION}_linux.tar.gz
      - run:
          name: Check source formatting
          command: "./cljstyle check --stats style-stats.tsv"
      - store_artifacts:
          path: style-stats.tsv
          destination: style

  test:
    executor: clojure
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-test-{{ checksum "project.clj" }}
            - v1-test-
      - run:
          name: Test projects
          command: lein monolith each do clean, check, install
      - save_cache:
          key: v1-test-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

  test-spark-3-java-11:
    executor: clojure-java-11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-test-spark-3-java-11-{{ checksum "project.clj" }}
            - v1-test-spark-3-java-11-
      - run:
          name: Test projects
          command: |
            lein -version
            lein monolith each with-profile +spark-3.0 do clean, check, install
      - save_cache:
          key: v1-test-spark-3-java-11-{{ checksum "project.clj" }}
          paths:
            - ~/.m2

  coverage:
    executor: clojure
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-coverage-{{ checksum "project.clj" }}
            - v1-coverage-
            - v1-test-
      - run:
          name: Install projects
          command: lein monolith each install
      - run:
          name: Generate coverage
          command: lein monolith with-all cloverage --codecov
      - save_cache:
          key: v1-coverage-{{ checksum "project.clj" }}
          paths:
            - ~/.m2
      - store_artifacts:
          path: target/coverage
          destination: coverage
      - run:
          name: Publish Coverage
          command: 'bash <(curl -s https://codecov.io/bash) -f target/coverage/codecov.json'


# Workflow definitions
workflows:
  version: 2
  build:
    jobs:
      - style
      - test
      - coverage:
          requires:
            - test
